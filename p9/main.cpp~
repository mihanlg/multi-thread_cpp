#include <iostream>
#include <iomanip>
#include <sys/times.h>
#include <cmath>
#include <omp.h>
#include <unistd.h>
#include <vector>
#include <cmath>

/*class Factorial {
public:
    Factorial(size_t max = 10, bool changable = true) : max_i(max), changable_max(changable) {
        fact_table.resize(max_i);
        fact_table[0] = 1;
        fill(max);
    }
    double operator[](size_t i) {
        return get(i);
    }
private:
    void fill(size_t n, size_t from = 1) {
        for (size_t i = from; i < n; i++) {
            fact_table[i] = fact_table[i-1]*i;
        }
    }
    void resize(size_t i) {
        std::cout << "Factorial table's size was changed to " << i << std::endl;
        fact_table.resize(i);
        fill(i, max_i);
        max_i = i;
    }
    double get(size_t i) {
        if (i > max_i) {
            if (changable_max)
                resize(i);
            else {
                std::cerr << "Factorial table's size couldn't be changed!" << std::endl;
                return -1;
            }
        }
        return fact_table[i];
    }
    size_t max_i;
    bool changable_max;
    std::vector<double> fact_table;
};*/


double factorial(size_t n) {
    if (n == 0)
        return 1.;
    else 
        return factorial(n-1)*n;
}

int main(int argc, char** argv)
{
    //THIS PROGRAM CALCULATES exp(1) USING OPENMP
    size_t numSteps = 10000;
    clock_t clockStart, clockStop;
    tms tmsStart, tmsStop;
    //WITH OPENMP
    {
        double exp1 = 0;
        double x, sum = 0.0;
        clockStart = times(&tmsStart);
        #pragma omp parallel for private (x), reduction (+:sum)
        for (size_t i=1; i<numSteps; i++) {
            x = factorial(i);
            sum = sum + 1./x;
        }
        exp1 = 1. + sum;
        clockStop = times(&tmsStop);
        std::cout << "The value of EXP(1) is " << exp1 << " Error is " << fabs(exp1 - M_E) << std::endl;
        double secs = (clockStop - clockStart)/static_cast<double>(sysconf(_SC_CLK_TCK));
        std::cout << "OPENMP: The time to calculate EXP(1) was " << secs << " seconds" << std::endl;
    }
    std::cout << std::endl;
    //WITHOUT OPENMP
    {
        double exp1 = 0;
        double x, sum = 0.0;
        clockStart = times(&tmsStart);
        for (size_t i=1; i<numSteps; i++) {
            sum = sum + 1./factorial(i);
        }
        exp1 = 1. + sum;
        clockStop = times(&tmsStop);
        std::cout << "The value of EXP(1) is " << exp1 << " Error is " << fabs(exp1 - M_E) << std::endl;
        double secs = (clockStop - clockStart)/static_cast<double>(sysconf(_SC_CLK_TCK));
        std::cout << "WITHOUT: The time to calculate EXP(1) was " << secs << " seconds" << std::endl;
    }
    return 0;
}
